<?php

namespace Drupal\extended_paragraph\Entity;

use Drupal\Core\Entity\EntityConstraintViolationList;
use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\entity_reference_revisions\EntityNeedsSaveInterface;
use Drupal\entity_reference_revisions\EntityNeedsSaveTrait;
use Drupal\paragraphs\Entity\Paragraph;


class ExtendedParagraph extends Paragraph implements EntityNeedsSaveInterface {

  use EntityNeedsSaveTrait;


  /**
   * {@inheritdoc}
   */
  public function label() {

    $label = $this->reference->getString();
    if ($label == "") {
      if ($parent = $this->getParentEntity()) {
        $parent_field = $this->get('parent_field_name')->value;
        $values = $parent->{$parent_field};
        foreach ($values as $key => $value) {
          if (!is_null($value->entity) && $value->entity->id() == $this->id()) {
            $label = $parent->label() . ' > ' . $value->getFieldDefinition()
                ->getLabel();
          }
        }
      }
    }
    return $label;
  }

  public function isTranslatable() {

    return TRUE; //!$this->getUntranslated()->language()->isLocked() && $this->languageManager()->isMultilingual();
  }

  public function preSave(EntityStorageInterface $storage) {
    parent::preSave($storage); // TODO: Change the autogenerated stub
  }

  public function preSaveRevision(EntityStorageInterface $storage, \stdClass $record) {
    parent::preSaveRevision($storage, $record); // TODO: Change the autogenerated stub
  }

  public function createDuplicate() {
    return parent::createDuplicate(); // TODO: See if the ClonedReferencedEntity can be of any service in this process
  }

  public function validate() {

    $this->validated = TRUE;
    $violations = $this->getTypedData()->validate();
    $errors = new EntityConstraintViolationList($this, iterator_to_array($violations));
    $filtered = $errors->getFieldNames();

    /**
     * TODO remove this hardcoded stub for something more sensible.
     * Perhaps check if it's nested on level 3?
     *  if ($parent = $this->getParentEntity()) {.....
     *
     * OR
     *
     * $violations = $paragraphs_entity->validate();
     * $violations->filterByFieldAccess();
     * if (count($violations) > 0) {
     * $item_mode = 'edit';
     * $messages = [];
     * foreach ($violations as $violation) {
     * $messages[] = $violation->getMessage();
     * }
     *
     * @see \Drupal\extended_paragraph\Plugin\Field\FieldWidget\@293
     *
     *
     */
    if ($filtered[0] == 'field_alitem_image') {
      $errors->remove(0);
    }
    return $errors;
  }
}
